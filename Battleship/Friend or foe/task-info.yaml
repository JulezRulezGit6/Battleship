type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import battleship.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Matrix.java
  visible: true
  text: |+
    package battleship;

    import java.util.Arrays;
    import java.util.stream.IntStream;

    public class Matrix {

        public static String[][] createMatrix(int row, int column, String filling) {

            String[][] matrix = new String[row][column];
            IntStream.range(0, row).forEach(i -> Arrays.fill(matrix[i], filling));
            return matrix;

        }

        public static void showMatrix(String[][] matrix) {
            char startRow = 'A';
            int startCol = 1;
            System.out.print("\n ");

            for (int i = 0; i < matrix.length; i++) {
                System.out.print(startCol + " ");
                startCol++;
            }
            System.out.println();

            for (int i = 0; i < matrix.length; i++) {
                System.out.print((char) (startRow + i) + " ");
                for (int j = 0; j < matrix[i].length; j++) {
                    System.out.print(matrix[i][j] + " ");

                }
                System.out.println();
            }
        }

        public static void fillInMatrixFields(String[][] matrix, int[] coordinates) {
            for (int i = coordinates[0]; i <= coordinates[2]; i++) {
                for (int j = coordinates[1]; j <= coordinates[3]; j++) {
                    matrix[i][j] = "O";
                }
            }
        }
    }

  learner_created: true
- name: src/battleship/Player.java
  visible: true
  text: "package battleship;\n\nimport java.util.List;\n\npublic class Player {\n\n\
    \    String name;\n    Matrix matrix;\n    List<Ships> list;\n\n\n    public Player(){\n\
    \        \n    }\n}\n"
  learner_created: true
- name: src/battleship/Ships.java
  visible: true
  text: |
    package battleship;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class Ships {
        String name;
        int cells;
        String[] coordinates;

        public Ships(String name, int size) {
            this.name = name;
            this.cells = size;
            coordinates = new String[size];
        }

        public static List<Ships> createNameOfShips() {
            List<Ships> ships = new ArrayList<>();
            ships.add(new Ships("Aircraft Carrier", 5));
            ships.add(new Ships("Battleship", 4));
            ships.add(new Ships("Submarine", 3));
            ships.add(new Ships("Cruiser", 3));
            ships.add(new Ships("Destroyer", 2));
            return ships;
        }

        public static void createShips(List<Ships> ships, String[][] matrix) {
            Scanner input = new Scanner(System.in);
            for (Ships elem : ships) {
                System.out.printf("\nEnter the coordinates of the %s (%d cells):\n\n", elem.getName(), elem.getCells());
                boolean end = true;
                while (end) {
                    String[] coordinatesString = input.nextLine().toUpperCase().trim().split(" ");
                    int[] coordinates = createCoordinates(coordinatesString);
                    try {
                        if (checkLocation(coordinates)) {
                            throw new IllegalArgumentException("\nError! Wrong ship location! Try again:\n");
                        }
                        if (!checkSize(elem, coordinates)) {
                            throw new IllegalArgumentException(String.format("\nError! Wrong length of the %s! Try again:\n", elem.getName()));
                        }
                        if (!checkPlace(matrix, coordinates)) {
                            throw new IllegalArgumentException("Error! You placed it too close to another one. Try again:");
                        }
                        fillShip(elem, coordinates);
                        Matrix.fillInMatrixFields(matrix, coordinates);
                        Matrix.showMatrix(matrix);
                        end = false;

                    } catch (IllegalArgumentException e) {
                        System.out.println(e.getMessage());
                    }

                }
            }

        }

        private static void fillShip(Ships ship, int[] coordinates) {
            int k = 0;
            for (int i = coordinates[0]; i <= coordinates[2]; i++) {
                for (int j = coordinates[1]; j <= coordinates[3]; j++) {
                    ship.coordinates[k] = "" + i + j;
                    k++;
                }
            }
        }

        private static boolean checkPlace(String[][] matrix, int[] coordinates) {
            int rowsNumber = matrix.length;
            int columnLength = matrix[0].length;

            int row1 = coordinates[0];
            int row2 = coordinates[2];
            int col1 = coordinates[1];
            int col2 = coordinates[3];


            int i = row1 == 0 ? 0 : row1 - 1;
            while (i <= row2 + 1 & i < rowsNumber) {
                int j = col1 == 0 ? 0 : col1 - 1;
                while (j <= col2 + 1 & j < columnLength) {
                    if (!matrix[i][j].equals("~")) {
                        return false;
                    }
                    j++;
                }
                i++;
            }
            return true;

        }

        private static boolean checkSize(Ships ship, int[] coordinates) {
            int size;
            if (coordinates[0] != coordinates[2]) {
                size = coordinates[2] - coordinates[0] + 1;
            } else {
                size = coordinates[3] - coordinates[1] + 1;
            }
            return size == ship.getCells();
        }

        private static boolean checkLocation(int[] coordinates) {
            return coordinates[0] != coordinates[2] && coordinates[1] != coordinates[3];
        }

        private static int[] createCoordinates(String[] coordinatesString) {
            int[] coordinates = new int[4];
            coordinates[0] = coordinatesString[0].charAt(0) - 'A';
            coordinates[1] = Integer.parseInt(coordinatesString[0].substring(1)) - 1;
            coordinates[2] = coordinatesString[1].charAt(0) - 'A';
            coordinates[3] = Integer.parseInt(coordinatesString[1].substring(1)) - 1;

            if (coordinates[0] > coordinates[2]) {
                int temp = coordinates[0];
                coordinates[0] = coordinates[2];
                coordinates[2] = temp;
            }
            if (coordinates[1] > coordinates[3]) {
                int temp = coordinates[1];
                coordinates[1] = coordinates[3];
                coordinates[3] = temp;
            }

            return coordinates;
        }

        public static void shipHit(List<Ships> ships, int[] shotCoordinates) {
            String coString = "" + shotCoordinates[0] + shotCoordinates[1];
            for (Ships ship : ships) {
                for (String str : ship.coordinates) {
                    if (coString.equals(str)) {
                        ship.setCells();
                        return;
                    }

                }

            }

        }

        public static boolean isSank(List<Ships> ships) {
            for (Ships ship : ships) {
                if (ship.getCells() == 0) {
                    ships.remove(ship);
                    return true;
                }
            }
            return false;
        }

        private void setCells() {
            cells -= 1;
        }

        private String getName() {
            return name;
        }

        private int getCells() {
            return cells;
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  learner_created: true
- name: src/battleship/Battle.java
  visible: true
  learner_created: true
- name: src/battleship/Constants.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/667/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/125/stages/667/implement">JetBrains
    Academy</a>
  time: Wed, 02 Dec 2020 18:02:30 UTC
record: 5
